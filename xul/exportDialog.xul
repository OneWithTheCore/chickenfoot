<?xml-stylesheet href="chrome://browser/skin/" type="text/css" ?>

<dialog id="chickenfootExportDialog"
        title="Package script as a Firefox extension"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        buttons="accept,cancel"
        onload="doLoad();"
        width="40em"
        ondialogaccept="return doOK();"
        ondialogcancel="return doCancel();">

<script type="application/x-javascript" src="chrome://chickenfoot/content/libraries/json.js"  />

<script>
<![CDATA[
  var Chickenfoot;
  var code;

  function gel(id) {
    return document.getElementById(id);
  }
  
  function isEmpty(id) {
    var field = gel(id);
    var value = field.value;
    return !Chickenfoot.trim(value).length;
  }

  var originalGuid = undefined;
  var pregeneratedGuid = undefined;

  function doLoad() {
    // unparcel items from window.arguments
    Chickenfoot = window.arguments[0].chickenfoot;
    
    // If the user does not have the GUID box populated, then he is probably
    // going to press the Generate GUID button.
    if (!gel('guid').value) {
      // generateRandomGuid() is slow the first time it is called,
      // so we call it here, in the background, so the response to clicking
      // the Generate GUID button is fast
      setTimeout(function() {
        pregeneratedGuid = Chickenfoot.generateRandomGuid();
      }, 0);
    }
      var ckbxParent = gel('triggers');
      ckbxParent.removeChild(ckbxParent.firstChild);
      var existingTriggers = Chickenfoot.gTriggerManager.triggers;
      for (var k=0; k<existingTriggers.length; k++) {
        var ckbx = window.document.createElement("checkbox");
        ckbx.setAttribute("label", existingTriggers[k].name);
        ckbx._trigger = existingTriggers[k];
        ckbxParent.appendChild(ckbx);
      }
  }

  var attributes = [
    'name', 'author', 'description', 'version', 'guid'
  ];
  
  function populateDialog(attributeMap) {
    var focusSet = false;
    for (var i = 0; i < attributes.length; ++i) {
      var field = attributes[i];
      var value = (field in attributeMap) ? attributeMap[field][0] : "";
      if (!value && field === 'version') value = "0.1";
      gel(field).setAttribute('value', value);
      if (!value && !focusSet) {
        gel(field).focus();
        focusSet = true;
      }
    }
    
    if (!focusSet) gel('outputPath').focus();
  }

  /**
   * @param guid {string} matching [a-f0-9-]*
   * @return the guid with all of its bits flipped
   */
  function invertGuid(guid) {
    var invertHexMap = {
      '0' : 'f',
      '1' : 'e',
      '2' : 'd',
      '3' : 'c',
      '4' : 'b',
      '5' : 'a',
      '6' : '9',
      '7' : '8',
      '8' : '7',
      '9' : '6',
      'a' : '5',
      'b' : '4',
      'c' : '3',
      'd' : '2',
      'e' : '1',
      'f' : '0'
    };
    return guid.replace(/[a-f0-9]/g, function(hex) {
      return invertHexMap[hex];
    });
  }
  
  function removeGuidDashes(guid) {
    return guid.replace(/-/g, '');
  }

  /**
   * Examine the inputs in the dialog to test if they are valid
   *
   * @return {object} with properties templateTags and outputPath
   *   if the inputs are valid
   * @throw error message {string} if inputs are invalid
   */
  function validateInputs() {
    var name;
    if (isEmpty('name')) {
      throw 'You must specify a name';
    }
    name = Chickenfoot.trim(gel('name').value);
    gel('name').setAttribute('value', name);
    
    var version;
    if (isEmpty('version')) {
      throw 'You must specify a version';
    }
    version = Chickenfoot.trim(gel('version').value);
    gel('version').setAttribute('value', version);

    if (isEmpty('guid')) {
      throw 'You must specify an ID';
    }
    var guid = gel('guid').value;
    guid = Chickenfoot.trim(guid).toLowerCase();
    if (!guid.match(/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/)) {
      throw guid + ' is not a valid ID';
    }
    gel('guid').setAttribute('value', guid);  // insert trimmed, lowercase version back into box
    
    if (!Chickenfoot.trim(gel('outputPath').value)) {
      throw 'You must specify a file to save the XPI as';
    }
    
    var triggerPaths = new Array(); var c=0;
    var ckbxs = gel("triggers").childNodes;
    for (var h=0; h<ckbxs.length; h++) {
      if (ckbxs[h].checked == true) {
        triggerPaths[c] = ckbxs[h]._trigger;
        c++;
      }
      else {continue;}
    }
    
    if (triggerPaths.length == 0) {throw 'You must choose at least one trigger to package';}

    // because we are copying the Chickenfoot and Chicken-bypass XPCOM objects,
    // we need to give them unique GUID contract ids, as well,
    // so we generate them from the XPI's GUID
    var chickenfootContractId = "@uid.csail.mit.edu/Chickenfoot/" + removeGuidDashes(guid) + ";";
    var chickenfootGuid = invertGuid(guid);
    var chickenbypassGuid = Chickenfoot.generateRandomGuid();
    var chickenfootCommandLineHandlerGuid = Chickenfoot.generateRandomGuid();
    var templateTags = {
      EXTENSION_NAME : guid,
      EXTENSION_DISPLAY_NAME : Chickenfoot.removeXmlChars(name),
      EXTENSION_AUTHOR : Chickenfoot.removeXmlChars(Chickenfoot.trim(gel('author').value)),
      GUID : guid,
      VERSION : Chickenfoot.removeXmlChars(version),
      DESCRIPTION : Chickenfoot.removeXmlChars(Chickenfoot.trim(gel('description').value)),
      CHICKENFOOT_CONTRACT_ID : chickenfootContractId,
      CHICKENFOOT_GUID : chickenfootGuid,
      CHICKEN_BYPASS_GUID : chickenbypassGuid,
      CHICKENFOOT_COMMAND_LINE_HANDLER_GUID : chickenfootCommandLineHandlerGuid,
      IS_EXPORTED_XPI : "true"
    };
    
    return {
      outputPath : Chickenfoot.trim(gel('outputPath').value),
      templateTags : templateTags,
      userFiles : Chickenfoot.trim(gel('userFiles').value),
      triggers : triggerPaths,
      icon : Chickenfoot.trim(gel('icon').value)
    };
  }

    function doOK() {
      var validatedInputs;
      try {
        validatedInputs = validateInputs();
      } catch (e) {
        alert("Error: " + e);
        return false;
      }
      window.arguments[0].createXpi = true;
      window.arguments[0].templateTags = validatedInputs.templateTags;
      window.arguments[0].outputPath = validatedInputs.outputPath;
      window.arguments[0].userFiles = validatedInputs.userFiles;
      window.arguments[0].triggers = validatedInputs.triggers;
      window.arguments[0].icon = validatedInputs.icon;
      //window.arguments[0].mutatedAttributes = findMutatedAttributes(validatedInputs);
      return true;
    }
    
    function findMutatedAttributes(validatedInputs) {
      var map = {};
      for (var i = 0; i < attributes.length; ++i) {
        var attr = attributes[i];
        var oldValue = (attr in attributeMap) ? attributeMap[attr][0] : "";
        var newValue = gel(attr).value;
        if (newValue != oldValue) map[attr] = newValue;
      }   
      return map;
    }
    
    function doCancel() {
        return true;
    }
    
    function pickOutputFile() {
      var nsIFilePicker = Components.interfaces.nsIFilePicker;
      var mode = nsIFilePicker.modeSave;
      var fp = Components.classes["@mozilla.org/filepicker;1"]
          .createInstance(nsIFilePicker);
      fp.init(window, 'Package My Chickenfoot Script As', mode);  
      fp.appendFilter("Firefox extensions (*.xpi)", "*.xpi");
      fp.appendFilters(fp.filterAll);
      fp.filterIndex = 0;
      fp.defaultExtension = ".xpi";    
      var res = fp.show();
      if (res == nsIFilePicker.returnOK || res == nsIFilePicker.returnReplace) {
        gel('outputPath').setAttribute('value', fp.file.path);
      }
    }
    
    function pickUserFiles(textboxID) {
      var nsIFilePicker = Components.interfaces.nsIFilePicker;
      var mode = nsIFilePicker.modeOpen;
      var fp = Components.classes["@mozilla.org/filepicker;1"]
          .createInstance(nsIFilePicker);
      fp.init(window, "Include With My Chickenfoot Extension", mode);
      fp.appendFilters(fp.filterAll);
      fp.appendFilter("Javascript files (*.js)", "*.js");  
      fp.appendFilter("Firefox extensions (*.xpi)", "*.xpi");
      fp.appendFilter("XUL documents (*.xul)", "*.xul");
      fp.appendFilter("Text files (*.txt)", "*.txt");
      fp.filterIndex = 0; 
      var res = fp.show();
      if (res == nsIFilePicker.returnOK || res == nsIFilePicker.returnReplace) {
        var currentValue = gel('userFiles').getAttribute('value');
        gel(textboxID).setAttribute('value', currentValue + fp.file.path + "\n");
      }
    }
    
    function pickUserFolders() {
      var nsIFilePicker = Components.interfaces.nsIFilePicker;
      var mode = nsIFilePicker.modeGetFolder;
      var fp = Components.classes["@mozilla.org/filepicker;1"]
          .createInstance(nsIFilePicker);
      fp.init(window, "Include Folder In Chickenfoot Extension", mode);
      fp.filterIndex = 0;    
      var res = fp.show();
      if (res == nsIFilePicker.returnOK || res == nsIFilePicker.returnReplace) {
        var currentValue = gel('userFiles').getAttribute('value');
        gel('userFiles').setAttribute('value', currentValue + fp.file.path + "\n");
      }
    }
    
    function pickGuid() {     
      var guid;
      if (pregeneratedGuid) {  // if pregenerated one available, use that
        guid = pregeneratedGuid;
        pregeneratedGuid = undefined; // destroy it so it cannot be reused
      } else {
        guid = Chickenfoot.generateRandomGuid();
      }
      gel('guid').setAttribute('value', guid);
    }
    
    var guidHelpDisplayed = false;
    
    function toggleGuidHelp() {
      var guidHelp = gel('guid-help');
      guidHelp.collapsed = guidHelpDisplayed;
      guidHelpDisplayed = !guidHelpDisplayed;
      window.sizeToContent();
    }
]]>
</script>

<vbox>

<label value="This feature is EXPERIMENTAL -- please report bugs to chickenfoot-developers@lists.csail.mit.edu" />

<grid>

  <columns>
    <column />
    <column flex="1" />
  </columns>
  
  <rows>

    <!-- NAME -->
    <row align="center">
      <label value="Name:" control="name" accesskey="n" />
      <textbox id="name" flex="1" accesskey="n" />
    </row>
    
    <!-- AUTHOR -->
    <row align="center">
      <label value="Author:" control="author" accesskey="a" />
      <textbox id="author" flex="1"/>
    </row>
    
    <!-- DESCRIPTION -->
    <row align="center">
      <label value="Description:" control="description" accesskey="d" />
      <textbox id="description" flex="1" />
    </row>

    <!-- VERSION -->
    <row align="center">
      <label value="Version:" control="version" accesskey="v" />
      <textbox id="version" flex="1" />
    </row>
    
    <!-- TRIGGERS -->
    <row align="center">
      <label value="Triggers to Include:" />
      <vbox id="triggers">
        <label value="no triggers currently exist" flex="1" />
      </vbox>
    </row>

    <!-- GUID -->
    <row align="center">
      <hbox align="center">
        <label value="GUID:" control="guid" accesskey="g" />
        <label class="text-link"
               value="What's this?"
               onclick="toggleGuidHelp()" />
      </hbox>
      <hbox flex="1">
        <textbox id="guid" flex="1" />
        <button label="Generate GUID" oncommand="pickGuid()" accesskey="i" />
      </hbox>
    </row>
    
    <row collapsed="true" id="guid-help">
      <spacer />
      <label>
A GUID is a Globally Unique IDentifier.
Every Firefox extension needs a unique identifier.
You can use the "Generate GUID" button to create a GUID for your extension.
It is important to use the same GUID when releasing subsequent versions of
your extension so Firefox replaces the old version with the new version.
The GUID will be written into your script so you do not lose it.
      </label>
    </row>

    <!-- ICON FILE -->
    <row align="center">
      <vbox>
      <label value="Icon for Extension:" control="icon" />
      <label value="(default is Chickenfoot beak)" />
      </vbox>
      <hbox flex="1">
        <textbox id="icon" flex="1" />
        <button label="Browse..." oncommand="pickUserFiles('icon')" />
      </hbox>
    </row>

    <!-- OUTPUT FILE -->
    <row align="center">
      <label value="Save File As:" control="outputPath" accesskey="s" />
      <hbox flex="1">
        <textbox id="outputPath" flex="1" />
        <button label="Browse..." oncommand="pickOutputFile()" accesskey="b" />
      </hbox>
    </row>
    
    <!-- INCLUDE FILES -->
    <row>
      <vbox flex="1">
        <label value="Other Included Files:" control="userFiles" accesskey="i" />
      </vbox>
      <hbox flex="1">
        <textbox id="userFiles" multiline="true" flex="4"/>
        <vbox flex="1">
          <button label="Add File" flex="1" oncommand="pickUserFiles('userFiles')"/>
          <button label="Add Folder" flex="1" oncommand="pickUserFolders()"/>
        </vbox>
        <vbox flex="2"> </vbox>
      </hbox>
    </row>

  </rows>

</grid>

</vbox>

</dialog>