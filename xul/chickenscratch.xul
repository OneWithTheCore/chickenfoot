<?xml version="1.0"?>
<!--
/*
 * Chickenfoot end-user web automation system
 *
 * Copyright (c) 2004-2007 Massachusetts Institute of Technology
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * Chickenfoot homepage: http://uid.csail.mit.edu/chickenfoot/
 */
-->
<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <!-- chickenscratchEvaluate() is defined twice below, once for
       Firefox 1.5 and once for Firefox 2.0.  Both definitions are the
       same, but the Firefox 2.0 definition, because it specifies Javascript version 1.7,
       allows Chickenfoot scripts to use new JS 1.7 keywords like yield and let. -->
       
  <script type="application/javascript;version=1.6"><![CDATA[
    /**
     * chickenscratchEvaluate(context, code) 
     * @param context Object defining Chickenscratch properties and methods
     * @param code String of Chickenscratch code
     * @return result of evaluating code
     * @throws any exception thrown by evaluating code
     */
    function chickenscratchEvaluate(/*Object context, String code*/) {
      // Any local variables in this method (as well
      // as global variables) will be visible to and modifiable by 
      // the user's code.  So we don't define any -- we just use
      // the arguments list.
      return eval.call(arguments[0], arguments[1]);
    }
  ]]></script>
  
  <script type="application/javascript;version=1.7"><![CDATA[
    /**
     * chickenscratchEvaluate(context, code) 
     * @param context Object defining Chickenscratch properties and methods
     * @param code String of Chickenscratch code
     * @return result of evaluating code
     * @throws any exception thrown by evaluating code
     */
    function chickenscratchEvaluate(/*Object context, String code*/) {
      // Any local variables in this method (as well
      // as global variables) will be visible to and modifiable by 
      // the user's code.  So we don't define any -- we just use
      // the arguments list.
      return eval.call(arguments[0], arguments[1]);
    }
  ]]></script>
  
</window>

